API Filter Structure:

The filter object should be a JSON structure with the following possible fields:

- sort
  - A string data type.
  - Has an option value of any record post type field id key.
  - Can have a hyphen - prefix before any of the options, meaning records are to be returned in descending order.

  - Typical Options:
    - name: Sort by the name or title of the record.
    - post_date: Sort by the creation date of the record.
    - Any field-key: Sort by a specific field.

  - Examples:
    - sorts by creation date from newest to oldest records.
      - { "sort": "-post_date" }

    - get records assigned to me, ordered by creation date from newest to oldest
      - { fields: [ { assigned_to: [ 'me' ] } ], sort: "-post_date" }

    - get records assigned to me, ordered by creation date from oldest to newest
      - { fields: [ { assigned_to: [ 'me' ] } ], sort: "post_date" }


- assigned_to
  - An array data type.
  - Used to filter post type records, based on user assignments.

  - Typical Options:
    - me: Records assigned to the current user making the query.
    - User ID (e.g., 83): Records assigned to a specific user.
    - Exclusion (e.g., "-84"): Exclude records assigned to a specific user.

  - Examples:
    - records assigned to the current user.
      - { fields: [ { assigned_to: [ "me" ] } ] }

    - records not assigned to the current user.
      - { fields: [ { assigned_to: [ "-me" ] } ] }

    - records not assigned to the current user but assigned to some other users.
      - { fields: [ { assigned_to: [ "-me", "74", "18", "25" ] } ] }

    - records assigned to a specific user.
      - { fields: [ { assigned_to: [ "18" ] } ] }


- key_select, multi_select & tags
  - An array data type.
  - Filters based on specific keys or tags.
  - Can have a hyphen - prefix before any of the options, meaning records with specified options must be ignored.
  - Has an option value of any record post type field id key.

  - Typical Options:
    - overall_stats (field-type: key_select)
    - milestones (field-type: multi_select)
    - gender (field-type: key_select)
    - tags (field-type: tags)
    - Any field-key of field-type: key_select, multi_select & tags

  - Examples:
    - get contacts that have the 'Has Bible' or 'Reading Bible' milestones and that are at the 'Meeting Scheduled' stage.
      - { fields: [ { milestones: [ 'milestone_has_bible', 'milestone_reading_bible' ] }, { seeker_path: [ 'scheduled' ] }, { tags: [ 'open' ] } ] }

    - get contacts that have the 'Has Bible' milestone but not the 'Reading Bible' milestone.
      - { fields: [ { milestones: [ 'milestone_has_bible', '-milestone_reading_bible' ] } ] }


- connection
  - An array data type.
  - Filters based on connections.

  - Examples:
    - get contacts subassigned to contact 93. Exclude contacts subassigned to contact 23
      - { fields: [ { subassinged: [ 93, -23 ] } ] }

    - get contacts assigned_to user 22 or subassigned to contact 93
      - { fields: [ { assigned_to: [ 22 ] }, { subassinged: [ 93 ] } ] }

    - get contacts with no groups connected
      - { fields: [ { groups: [] } ] }

    - get all contact with any connected group
      - { fields: [ { groups: [*] } ] }


- location
  - An array data type.
  - Filters based on location grid IDs.

  - Examples:
    - records associated with a specific location
      - { fields: [ { location_grid: [12345] } ] }

    - get contacts in location with location_grid (in the dt_location_grid table grid_id) id 123456 but exclude location 5678
      - { fields: [ { location_grid: [123456, 5678] } ] }


- date
  - An object data type with internal start and end parameters.
  - Filters based on date fields.
  - Date values must have the format: YYYY-MM-DD

  - Typical Options:
    - created_on
    - baptism_date
    - Any field-key of field-type: date

  - Examples:
    - get the records created in 2018
      - { fields: [ { created_on : { start: "2018-01-01", end: "2019-01-01" } } ] }

    - get contacts baptized before Feb 2019
      - { fields: [ { baptism_date : { end: "2019-02-01" } } ] }


- boolean
  - An array data type.
  - Values should be 1 for true or 0 for false.

  - Typical Options:
    - requires_update
    - favourite
    - Any field-key of field-type: boolean

  - Examples:
    - get records that need an update
      - { fields: [ { requires_update : [ 1 ] } ] }

    - get records which do not require any updates
      - { fields: [ { requires_update : [ 0 ] } ] }


- number
  - An array data type.
  - Filters based on numerical fields.
  - Supports the following operators:
    - >
    - <
    - >=
    - <=
    - =
    - !=

  - Typical Options:
    - baptism_generations
    - Any field-key of field-type: number

  - Examples:
    - get records that are baptism generation greater than 4
      - { fields: [ { baptism_generation : [ operator: ">", number: 4 ] } ] }

    - get records that are baptism generation equal to 11
      - { fields: [ { baptism_generation : [ operator: "=", number: 11 ] } ] }

    - get records that are baptism generation less than 3
      - { fields: [ { baptism_generation : [ operator: "<", number: 3 ] } ] }


- text & communication_channel
  - An array data type.

  - Typical Options:
    - contact_phone
    - name
    - nickname
    - Any field-key of field-type: text or communication_channel

  - Examples:
    - search phone numbers matching 123 anywhere in the number
      - { fields: [ { contact_phone : [ "123" ] } ] }

    - search phone numbers matching 123 exactly
      - { fields: [ { contact_phone : [ "^123" ] } ] }

    - search records for names; which do not match "Bob"
      - { fields: [ { name : [ "-Bob" ] } ] }

    - search phone numbers matching 123 but don't match 234
      - { fields: [ { contact_phone : [ "123", "-234" ] } ] }

    - search records for any phone number
      - { fields: [ { contact_phone : [ "*" ] } ] }

    - search for records with no phone numbers
      - { fields: [ { contact_phone : [] } ] }

